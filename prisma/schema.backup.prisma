// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String         @id @default(cuid())
  name      String
  phone     String?        @unique
  birthday  DateTime?
  classroom String?
  role      String?
  lastSeen  DateTime?
  groups    GroupMember[]
  tasks     TaskAssignee[]
  messages  Message[]      @relation("MessageAuthor")

  // ОБРАТНОЕ поле к ChatRead.user
  chatReads ChatRead[]
}

model Group {
  id      String        @id @default(cuid())
  name    String
  members GroupMember[]
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  hidden      Boolean        @default(false)
  priority    String         @default("normal") // normal | high
  assignees   TaskAssignee[]
  tags        TaskTag[]
}

model TaskAssignee {
  id     String @id @default(cuid())
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  tasks TaskTag[]
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
}

model Thread {
  id       String    @id @default(cuid())
  title    String
  messages Message[]

  // ОБРАТНОЕ поле к ChatRead.thread
  chatReads ChatRead[]

  @@index([title])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  authorId  String
  threadId  String
  author    User     @relation("MessageAuthor", fields: [authorId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])

  @@index([threadId, createdAt])
}

// ЕДИНСТВЕННАЯ версия ChatRead — со связями и индексами
model ChatRead {
  id         String   @id @default(cuid())
  threadId   String
  userId     String
  lastReadAt DateTime @default(now())

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@index([userId])
  @@index([threadId])
}
