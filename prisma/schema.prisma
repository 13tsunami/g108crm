generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String    @id @default(cuid())
  name             String
  username         String?   @unique
  email            String?   @unique
  phone            String?   @unique
  birthday         DateTime?
  classroom        String?
  role             String?
  avatarUrl        String?
  telegram         String?
  about            String?
  notifyEmail      Boolean   @default(true)
  notifyTelegram   Boolean   @default(false)
  subjects         String?
  methodicalGroups String?
  passwordHash     String?
  lastSeen         DateTime?

  // твои связи
  groups   GroupMember[]
  messages Message[]      @relation("MessageAuthor")
  tasks    TaskAssignee[]

  // добавил для чатов (ничего не ломает)
  threadsA Thread[]   @relation("ThreadA")
  threadsB Thread[]   @relation("ThreadB")
  reads    ChatRead[]

  @@index([name])
  @@index([role])
}

model Group {
  id      String        @id @default(cuid())
  name    String
  members GroupMember[]
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  hidden      Boolean        @default(false)
  priority    String         @default("normal")
  assignees   TaskAssignee[]
  tags        TaskTag[]

  @@index([dueDate])
}

model TaskAssignee {
  id     String @id @default(cuid())
  taskId String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@index([userId])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  tasks TaskTag[]
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@index([tagId])
}

model Thread {
  id String @id @default(cuid())

  // твоя колонка — сохраняю как есть
  title String

  // добавлено для 1–1 чатов
  aId String
  bId String
  a   User   @relation("ThreadA", fields: [aId], references: [id])
  b   User   @relation("ThreadB", fields: [bId], references: [id])

  // служебные поля для быстрых списков/бейджей
  lastMessageAt   DateTime?
  lastMessageText String?

  // связи
  messages Message[]
  reads    ChatRead[]

  // одна пара — один тред (пару сортируем в коде)
  @@unique([aId, bId], map: "thread_pair_unique")
  @@index([lastMessageAt, id], map: "thread_last_idx")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  authorId  String
  threadId  String

  thread Thread @relation(fields: [threadId], references: [id])
  author User   @relation("MessageAuthor", fields: [authorId], references: [id])

  @@index([threadId, createdAt], map: "msg_thread_time_idx")
  @@index([authorId], map: "msg_author_idx")
}

model ChatRead {
  // оставляю твой id, ничего не меняю
  id         String   @id @default(cuid())
  threadId   String
  userId     String
  lastReadAt DateTime @default(now())

  // добавил явные связи — это удобно для include/Studio
  thread Thread @relation(fields: [threadId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([threadId, userId])
  @@index([userId], map: "read_user_idx")
  @@index([threadId], map: "read_thread_idx")
}
